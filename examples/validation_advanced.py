from random import randint

from fastcfg import config
from fastcfg.exceptions import ConfigItemValidationError
from fastcfg.sources.memory import from_callable
from fastcfg.validation.policies import RangeValidator


def random_num() -> int:
    """Returns a random number between 1 and 5"""
    return randint(1, 5)


# Wrap the `random_num` function in a `LiveConfigItem` using `from_callable`.
# Each access to `config.rand` triggers a call to `random_num` under the hood,
# generating a new value between 1 and 5.
config.rand = from_callable(random_num)

# Define a validator that only allows values between 1 and 4.
# Note that the `random_num` function can return 5, which will trigger a validation error.
range_validator = RangeValidator(1, 4)
config.rand.add_validator(range_validator)

# This setup ensures that each new value generated by `random_num` is automatically validated.
# If the value is outside the range of 1 to 4, a validation error is raised.
try:
    print(config.rand)  # Attempts to output a random number between 1 and 5.
except ConfigItemValidationError as exc:
    print(
        "Validation error:", exc
    )  # Handle the case where the item fails validation.
